{"version":3,"sources":["components/BottomButton.js","functions/useDidUpdate.js","components/DayButton.js","components/DayButtonGrid.js","services/storage.js","Game.js","functions/useHighScoreState.js","App.js","serviceWorker.js","index.js"],"names":["BottomButton","props","useState","fullyHidden","setFullyHidden","callback","deps","hasMount","useRef","useEffect","current","useDidUpdate","isVisible","Box","key","align","margin","bottom","right","animation","Button","label","onClick","style","visibility","DayButton","anySelected","undefined","selectedDayOfWeek","isSelectedButFalse","expectedDayOfWeek","number","isCorrect","flex","basis","justify","boxShadow","background","setSelectedDayOfWeek","Text","size","title","DayButtonGrid","selected","setSelected","expected","grow","direction","alignSelf","width","wrap","options","ignoreSearch","ignoreMethod","ignoreVary","storage","getHighScore","caches","open","then","cache","match","response","json","parsed","value","catch","setHighScore","score","put","Response","moment","require","momentRandom","DATE_FORMAT","Game","generateRandomDay","endDate","startDate","parseDateToWeekDayNumber","date","Number","format","initialDay","currentDay","setCurrentDay","setScore","highScore","useHighScoreState","setExpectedDayOfWeek","timeLeft","setTimeLeft","timer","setTimeout","t","clearTimeout","fill","overflow","maxWidth","top","left","type","duration","Heading","level","color","nextDay","theme","global","font","family","App","Grommet","full","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e3fe02b2.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {Box, Button} from \"grommet\";\nimport useDidUpdate from \"../functions/useDidUpdate\";\n\nexport default function BottomButton(props) {\n\n  const [fullyHidden, setFullyHidden] = useState(true);\n\n  useDidUpdate(() => {\n    setFullyHidden(false)\n  }, [props.isVisible]);\n\n  return <div>\n  <Box\n    key={props.isVisible}\n    align={\"end\"}\n    margin={{bottom: \"large\", right: \"large\"}}\n    animation={props.isVisible ? {\"type\": \"fadeIn\"} : {\"type\": \"fadeOut\", \"duration\": 200}}\n  >\n    <Button\n      label={props.label}\n      onClick={props.isVisible ? props.onClick : () => {}}\n      style={{visibility: (fullyHidden ? \"hidden\" : \"visible\")}}\n    />\n  </Box>\n  </div>\n}\n","import {useEffect, useRef} from 'react';\n\nexport default function useDidUpdate (callback, deps) {\n  const hasMount = useRef(false);\n\n  useEffect(() => {\n    if (hasMount.current) {\n      callback()\n    } else {\n      hasMount.current = true\n    }\n  }, deps)\n}\n","import {Box, Text} from \"grommet\";\nimport React from \"react\";\n\nexport default function DayButton(props) {\n\n  const anySelected = props.selectedDayOfWeek !== undefined;\n\n  const isSelectedButFalse =  anySelected &&\n    props.selectedDayOfWeek !== props.expectedDayOfWeek &&\n    props.number === props.selectedDayOfWeek;\n\n  const isCorrect = anySelected &&\n    props.number === props.expectedDayOfWeek;\n\n  return props.number !== undefined ?\n    <Box\n      flex={{'grow': 1}}\n      basis={'xxsmall'}\n      align={'center'}\n      justify={'center'}\n      style={{boxShadow: \"none\"}}\n      animation={(isSelectedButFalse || isCorrect) ? {\"type\": \"zoomIn\", \"duration\": 400} : {}}\n      background={isSelectedButFalse ? 'status-error' : (isCorrect ? 'status-ok' : \"\")}\n      onClick={() => {\n        if (!anySelected) props.setSelectedDayOfWeek(props.number)\n      }}\n    >\n      <Text size={\"large\"}>{props.title}</Text>\n    </Box> :\n    <Box\n      flex={{'grow': 1}}\n      basis={'xxsmall'}\n    />;\n}\n","import {Box} from \"grommet\";\nimport DayButton from \"./DayButton\";\nimport React from \"react\";\n\nexport default function DayButtonGrid(props) {\n\n  let selected = props.selectedDayOfWeek;\n  let setSelected = props.setSelectedDayOfWeek;\n  let expected = props.expectedDayOfWeek;\n\n  return <Box\n    flex={{grow: 2}}\n    direction={'column'}\n    justify={'center'}\n    alignSelf={'center'}\n    style={{width: \"100%\"}}\n  >\n    <Box\n      flex={'grow'}\n      direction={\"row\"}\n      align={'stretch'}\n      wrap={true}\n    >\n      <DayButton title={'Monday'} number={1} selectedDayOfWeek={selected} setSelectedDayOfWeek={setSelected} expectedDayOfWeek={expected}/>\n      <DayButton title={'Tuesday'} number={2} selectedDayOfWeek={selected} setSelectedDayOfWeek={setSelected} expectedDayOfWeek={expected}/>\n      <DayButton title={'Wednesday'} number={3} selectedDayOfWeek={selected} setSelectedDayOfWeek={setSelected} expectedDayOfWeek={expected}/>\n    </Box>\n    <Box\n      flex={'grow'}\n      direction={\"row\"}\n      align={'stretch'}\n      wrap={true}\n    >\n      <DayButton title={'Thursday'} number={4} selectedDayOfWeek={selected} setSelectedDayOfWeek={setSelected} expectedDayOfWeek={expected}/>\n      <DayButton title={'Friday'} number={5} selectedDayOfWeek={selected} setSelectedDayOfWeek={setSelected} expectedDayOfWeek={expected}/>\n      <DayButton title={'Saturday'} number={6} selectedDayOfWeek={selected} setSelectedDayOfWeek={setSelected} expectedDayOfWeek={expected}/>\n    </Box>\n    <Box\n      flex={'grow'}\n      direction={\"row\"}\n      align={'stretch'}\n      wrap={true}\n    >\n      <DayButton />\n      <DayButton title={'Sunday'} number={0} selectedDayOfWeek={selected} setSelectedDayOfWeek={setSelected} expectedDayOfWeek={expected}/>\n      <DayButton />\n    </Box>\n  </Box>\n}\n","const options = {\r\n  ignoreSearch: true,\r\n  ignoreMethod: true,\r\n  ignoreVary: true\r\n};\r\n\r\nconst getHighScore = () => caches.open('highScore')\r\n    .then((cache) => cache.match('value', options))\r\n    .then(response => response.json())\r\n    .then(parsed => parsed.value)\r\n    .catch(() => 0);\r\n\r\nconst setHighScore = (score) => {\r\n  caches.open('highScore')\r\n      .then((cache) => cache.put('value', new Response(`{\"value\": \"${score}\"}`)));\r\n};\r\n\r\nexport const storage = {\r\n  getHighScore,\r\n  setHighScore\r\n};","import React, {useEffect, useRef, useState} from 'react';\nimport {Box, Heading, Text} from 'grommet';\nimport BottomButton from \"./components/BottomButton\";\nimport DayButtonGrid from \"./components/DayButtonGrid\";\nimport {useHighScoreState} from \"./functions/useHighScoreState\";\nconst moment = require('moment');\nconst momentRandom = require('moment-random');\n\nconst DATE_FORMAT = \"YYYY-MM-DD\";\n\nfunction Game(props) {\n\n  const generateRandomDay = () => momentRandom(\n    moment(props.endDate, DATE_FORMAT),\n    moment(props.startDate, DATE_FORMAT)\n  );\n\n  const parseDateToWeekDayNumber = (date) => Number(date.format('d'));\n\n  let initialDay = generateRandomDay();\n  const [currentDay, setCurrentDay] = useState(initialDay.format(DATE_FORMAT));\n  const [score, setScore] = useState(0);\n  const [highScore, setHighScore] = useHighScoreState();\n  const [selectedDayOfWeek, setSelectedDayOfWeek] = useState();\n  const [expectedDayOfWeek, setExpectedDayOfWeek] = useState(parseDateToWeekDayNumber(initialDay));\n  const [timeLeft, setTimeLeft] = useState(10);\n  let timer = useRef();\n\n  useEffect(() => {\n    if (timeLeft > 0 && selectedDayOfWeek === undefined) {\n      timer.current = setTimeout(() => {\n        setTimeLeft(t => t - 1)\n      }, 1000)\n    } else {\n      clearTimeout(timer.current)\n    }\n  }, [timeLeft, selectedDayOfWeek]);\n\n  const startNewRound = () => {\n    let nextDay = generateRandomDay();\n    setCurrentDay(nextDay.format(DATE_FORMAT));\n    if (selectedDayOfWeek === expectedDayOfWeek && timeLeft > 0) {\n      setScore(score => score + 1);\n      if (score + 1 > highScore) setHighScore(score + 1);\n    } else {\n      setScore(0)\n    }\n    setSelectedDayOfWeek(undefined);\n    setExpectedDayOfWeek(parseDateToWeekDayNumber(nextDay));\n    setTimeLeft(10)\n  };\n\n  return (\n      <Box fill background={'brand'} direction={'column'} overflow={'hidden'}>\n        <Box direction={\"column\"} flex={\"grow\"} style={{maxWidth: 800, width: \"100%\"}} alignSelf={'center'}>\n          <Box\n            direction={\"row\"}\n            justify={\"between\"}\n            margin={{top: \"medium\", right: \"medium\", left: \"medium\"}}\n          >\n            <Text size={\"xlarge\"}>Highscore: {highScore}</Text>\n            <Text size={\"xlarge\"}>Score: {score}</Text>\n          </Box>\n          <Box\n            key={currentDay}\n            flex={{grow: 1}}\n            align={'center'}\n            justify={'center'}\n            animation={{\"type\":\"fadeIn\"}}\n          >\n            <Box animation={(timeLeft <= 3 && timeLeft > 0) ? {type: \"pulse\", size: \"large\", duration: 500} : {}} flex={{grow: 1}}>\n              <Heading size={\"large\"} level={'1'} color={timeLeft === 0 && 'status-warning'}>\n                {timeLeft}\n              </Heading>\n            </Box>\n            <Box flex={{grow: 4}}>\n              <Heading size={\"large\"} level={'1'}>\n                {currentDay}\n              </Heading>\n            </Box>\n          </Box>\n          <DayButtonGrid selectedDayOfWeek={selectedDayOfWeek} setSelectedDayOfWeek={setSelectedDayOfWeek} expectedDayOfWeek={expectedDayOfWeek}/>\n          <BottomButton label={\"Continue\"} onClick={startNewRound} isVisible={selectedDayOfWeek !== undefined}/>\n        </Box>\n      </Box>\n  );\n}\n\nexport default Game;\n","import { useState, useEffect } from 'react';\r\nimport {storage} from \"../services/storage\";\r\n\r\nexport function useHighScoreState() {\r\n  const [highScore, setHighScore] = useState(0);\r\n\r\n  useEffect(() => {\r\n    storage.getHighScore().then(score => {\r\n      setHighScore(score)\r\n    })\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    storage.setHighScore(highScore)\r\n  }, [highScore]);\r\n\r\n  return [highScore, setHighScore];\r\n}","import React from 'react';\nimport {Grommet} from 'grommet';\nimport Game from \"./Game\";\nconst theme = {\n  global: {\n    font: {\n      family: 'Solway'\n    }\n  },\n};\n\nfunction App() {\n\n  return (\n    <Grommet theme={theme} full>\n     <Game startDate={'1800-01-01'} endDate={'2199-12-31'}/>\n    </Grommet>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}